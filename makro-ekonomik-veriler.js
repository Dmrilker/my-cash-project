// ==========================================
// MAKRO EKONOMƒ∞K VERƒ∞LER SINIFI
// ==========================================
class MakroEkonomikVeriler {
    constructor() {
        // Makro ekonomik veri kaynaklarƒ±
        this.ekonomikGostergeler = {
            faizOranlari: null,
            enflasyon: null,
            issizlik: null,
            gsyh: null,
            merkenzBankasiKararlari: null,
            jeopolitikRisk: 0,
            volatiliteIndeksi: 0
        };
        
        // Haber ve duyuru takibi
        this.haberAnalizi = {
            pozitifHaberler: 0,
            negatifHaberler: 0,
            n√∂tralHaberler: 0,
            toplamDuyguSkoru: 0,
            sonHaberler: []
        };
        
        // K√ºresel piyasa durumu
        this.kureselPiyasalar = {
            spx500: null,
            nasdaq: null,
            dxy: null,           // Dolar Endeksi
            vix: null,           // Korku Endeksi
            gold: null,
            oil: null,
            bonds10y: null       // 10 yƒ±llƒ±k tahvil faizi
        };
        
        // Ekonomik takvim
        this.ekonomikTakvim = {
            bugunEtkinlikler: [],
            gelecekEtkinlikler: [],
            sonSonuclar: []
        };
        
        console.log('üåê Makro Ekonomik Veriler sistemi ba≈ülatƒ±ldƒ±');
    }
    
    // ==========================================
    // MAKRO EKONOMƒ∞K VERƒ∞ TOPLAMA
    // ==========================================
    async makroVerileriGuncelle() {
        console.log('üåê Makro ekonomik veriler g√ºncelleniyor...');
        
        try {
            // Paralel veri √ßekme
            const [
                faizVerileri,
                piyasaVerileri,
                ekonomikTakvimVerileri,
                haberAnalizi,
                jeopolitikAnaliz
            ] = await Promise.allSettled([
                this.faizOranlariCek(),
                this.kureselPiyasaVerileriCek(),
                this.ekonomikTakvimCek(),
                this.haberAnaliziYap(),
                this.jeopolitikRiskAnalizi()
            ]);
            
            // Sonu√ßlarƒ± i≈üle
            if (faizVerileri.status === 'fulfilled') {
                this.ekonomikGostergeler = { ...this.ekonomikGostergeler, ...faizVerileri.value };
            }
            
            if (piyasaVerileri.status === 'fulfilled') {
                this.kureselPiyasalar = { ...this.kureselPiyasalar, ...piyasaVerileri.value };
            }
            
            if (ekonomikTakvimVerileri.status === 'fulfilled') {
                this.ekonomikTakvim = { ...this.ekonomikTakvim, ...ekonomikTakvimVerileri.value };
            }
            
            if (haberAnalizi.status === 'fulfilled') {
                this.haberAnalizi = { ...this.haberAnalizi, ...haberAnalizi.value };
            }
            
            if (jeopolitikAnaliz.status === 'fulfilled') {
                this.ekonomikGostergeler.jeopolitikRisk = jeopolitikAnaliz.value;
            }
            
            // Makro skoru hesapla
            const makroSkoru = this.makroSkoruHesapla();
            
            console.log('‚úÖ Makro ekonomik veriler g√ºncellendi');
            console.log(`üìä Makro Skoru: ${makroSkoru.skor}/100 (${makroSkoru.seviye})`);
            
            return {
                ekonomikGostergeler: this.ekonomikGostergeler,
                kureselPiyasalar: this.kureselPiyasalar,
                ekonomikTakvim: this.ekonomikTakvim,
                haberAnalizi: this.haberAnalizi,
                makroSkoru: makroSkoru
            };
            
        } catch (hata) {
            console.error('‚ùå Makro veri g√ºncelleme hatasƒ±:', hata);
            return this.fallbackMakroVerileri();
        }
    }
    
    // ==========================================
    // FAƒ∞Z ORANLARI VE MERKEZ BANKASI VERƒ∞LERƒ∞
    // ==========================================
    async faizOranlariCek() {
        try {
            // FRED API (Federal Reserve Economic Data) - √úcretsiz
            const fedFaizResponse = await fetch(
                'https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key=demo&file_type=json&limit=1&sort_order=desc'
            );
            
            if (fedFaizResponse.ok) {
                const fedData = await fedFaizResponse.json();
                const fedFaiz = fedData.observations?.[0]?.value;
                
                // T√ºrkiye Merkez Bankasƒ± faizi (demo veri)
                const tcmbFaiz = this.demoTcmbFaizi();
                
                // ECB faizi (demo veri)
                const ecbFaiz = this.demoEcbFaizi();
                
                return {
                    faizOranlari: {
                        fed: parseFloat(fedFaiz) || 5.25,
                        tcmb: tcmbFaiz,
                        ecb: ecbFaiz,
                        sonGuncelleme: new Date()
                    }
                };
            } else {
                throw new Error('FRED API hatasƒ±');
            }
            
        } catch (hata) {
            console.warn('‚ö†Ô∏è Faiz oranlarƒ± API hatasƒ±, demo veri kullanƒ±lƒ±yor');
            return {
                faizOranlari: {
                    fed: 5.25,
                    tcmb: this.demoTcmbFaizi(),
                    ecb: 4.50,
                    sonGuncelleme: new Date()
                }
            };
        }
    }
    
    demoTcmbFaizi() {
        // Ger√ßek√ßi TCMB faizi sim√ºlasyonu
        const temelFaiz = 45.0;
        const volatilite = 2.0;
        const rastgeleEtki = (Math.random() - 0.5) * volatilite;
        const politikaEtkisi = Math.sin(Date.now() / 2592000000) * 5; // Aylƒ±k deƒüi≈üim
        
        return Math.max(25, Math.min(65, temelFaiz + rastgeleEtki + politikaEtkisi));
    }
    
    demoEcbFaizi() {
        // Ger√ßek√ßi ECB faizi sim√ºlasyonu
        const temelFaiz = 4.50;
        const volatilite = 0.25;
        const rastgeleEtki = (Math.random() - 0.5) * volatilite;
        
        return Math.max(3.5, Math.min(5.5, temelFaiz + rastgeleEtki));
    }
    
    // ==========================================
    // K√úRESEL Pƒ∞YASA VERƒ∞LERƒ∞
    // ==========================================
    async kureselPiyasaVerileriCek() {
        try {
            // Yahoo Finance API kullanarak k√ºresel endeksler
            const endeksler = [
                '^GSPC',    // S&P 500
                '^IXIC',    // NASDAQ
                'DX-Y.NYB', // Dollar Index
                '^VIX',     // VIX
                'GC=F',     // Gold Futures
                'CL=F',     // Oil Futures
                '^TNX'      // 10-Year Treasury
            ];
            
            const piyasaVerileri = {};
            
            // Paralel API √ßaƒürƒ±larƒ±
            const sonuclar = await Promise.allSettled(
                endeksler.map(sembol => this.yahooFinanceVeriCek(sembol))
            );
            
            // Sonu√ßlarƒ± i≈üle
            const [spx, nasdaq, dxy, vix, gold, oil, bonds] = sonuclar;
            
            return {
                spx500: spx.status === 'fulfilled' ? spx.value : this.demoSpx500(),
                nasdaq: nasdaq.status === 'fulfilled' ? nasdaq.value : this.demoNasdaq(),
                dxy: dxy.status === 'fulfilled' ? dxy.value : this.demoDxy(),
                vix: vix.status === 'fulfilled' ? vix.value : this.demoVix(),
                gold: gold.status === 'fulfilled' ? gold.value : this.demoGoldFutures(),
                oil: oil.status === 'fulfilled' ? oil.value : this.demoOilFutures(),
                bonds10y: bonds.status === 'fulfilled' ? bonds.value : this.demoBonds(),
                sonGuncelleme: new Date()
            };
            
        } catch (hata) {
            console.warn('‚ö†Ô∏è K√ºresel piyasa verileri hatasƒ±, demo veri kullanƒ±lƒ±yor');
            return this.fallbackKureselPiyasaVerileri();
        }
    }
    
    async yahooFinanceVeriCek(sembol) {
        try {
            const response = await fetch(
                `https://query1.finance.yahoo.com/v8/finance/chart/${sembol}?interval=1d&range=1d`
            );
            
            if (!response.ok) throw new Error(`Yahoo Finance API hatasƒ±: ${response.status}`);
            
            const data = await response.json();
            const meta = data.chart?.result?.[0]?.meta;
            
            if (meta && meta.regularMarketPrice) {
                return {
                    fiyat: meta.regularMarketPrice,
                    deƒüi≈üim: meta.regularMarketChangePercent || 0,
                    hacim: meta.regularMarketVolume || 0,
                    sembol: sembol
                };
            } else {
                throw new Error('Veri bulunamadƒ±');
            }
            
        } catch (hata) {
            throw new Error(`${sembol} verisi alƒ±namadƒ±: ${hata.message}`);
        }
    }
    
    // ==========================================
    // HABER ANALƒ∞Zƒ∞ VE DUYGU ANALƒ∞Zƒ∞
    // ==========================================
    async haberAnaliziYap() {
        try {
            // NewsAPI ile finansal haberler (demo implementation)
            const haberler = await this.finansalHaberleriCek();
            const duyguAnalizi = this.haberDuyguAnalizi(haberler);
            
            return {
                pozitifHaberler: duyguAnalizi.pozitif,
                negatifHaberler: duyguAnalizi.negatif,
                n√∂tralHaberler: duyguAnalizi.n√∂tral,
                toplamDuyguSkoru: duyguAnalizi.toplamSkor,
                sonHaberler: haberler.slice(0, 5), // Son 5 haber
                sonGuncelleme: new Date()
            };
            
        } catch (hata) {
            console.warn('‚ö†Ô∏è Haber analizi hatasƒ±, demo veri kullanƒ±lƒ±yor');
            return this.fallbackHaberAnalizi();
        }
    }
    
    async finansalHaberleriCek() {
        // Ger√ßek NewsAPI entegrasyonu burada olacak
        // Demo ama√ßlƒ± sim√ºle edilmi≈ü haberler
        return [
            {
                ba≈ülƒ±k: "Fed faiz kararƒ± a√ßƒ±klandƒ±",
                √∂zet: "Federal Reserve faiz oranlarƒ±nƒ± deƒüi≈ütirmeme kararƒ± aldƒ±",
                duygu: "n√∂tral",
                √∂nem: "y√ºksek",
                zaman: new Date()
            },
            {
                ba≈ülƒ±k: "Altƒ±n fiyatlarƒ± y√ºkseli≈üte",
                √∂zet: "Jeopolitik gerilimler altƒ±n talebini artƒ±rƒ±yor", 
                duygu: "pozitif",
                √∂nem: "orta",
                zaman: new Date()
            },
            {
                ba≈ülƒ±k: "Kripto para d√ºzenlemeleri",
                √∂zet: "Yeni d√ºzenlemeler Bitcoin fiyatƒ±nƒ± etkileyebilir",
                duygu: "negatif", 
                √∂nem: "y√ºksek",
                zaman: new Date()
            }
        ];
    }
    
    haberDuyguAnalizi(haberler) {
        let pozitif = 0;
        let negatif = 0;
        let n√∂tral = 0;
        let toplamSkor = 0;
        
        haberler.forEach(haber => {
            switch(haber.duygu) {
                case 'pozitif':
                    pozitif++;
                    toplamSkor += (haber.√∂nem === 'y√ºksek' ? 2 : 1);
                    break;
                case 'negatif':
                    negatif++;
                    toplamSkor -= (haber.√∂nem === 'y√ºksek' ? 2 : 1);
                    break;
                default:
                    n√∂tral++;
            }
        });
        
        return { pozitif, negatif, n√∂tral, toplamSkor };
    }
    
    // ==========================================
    // JEOPOLƒ∞Tƒ∞K Rƒ∞SK ANALƒ∞Zƒ∞
    // ==========================================
    async jeopolitikRiskAnalizi() {
        try {
            // Basit jeopolitik risk skoru (0-100)
            // Ger√ßek uygulamada haber API'lerinden beslenecek
            
            const riskFakt√∂rleri = [
                this.b√∂lgeselGerilimRiski(),
                this.ekonomikSava≈üRiski(), 
                this.enerjiG√ºvenliƒüiRiski(),
                this.parabirimSava≈üƒ±Riski()
            ];
            
            const ortalama = riskFakt√∂rleri.reduce((a, b) => a + b, 0) / riskFakt√∂rleri.length;
            
            return Math.min(100, Math.max(0, Math.round(ortalama)));
            
        } catch (hata) {
            console.warn('‚ö†Ô∏è Jeopolitik risk analizi hatasƒ±');
            return 35; // Orta seviye risk
        }
    }
    
    b√∂lgeselGerilimRiski() {
        // Sim√ºle edilmi≈ü b√∂lgesel gerilim riski
        const temelRisk = 30;
        const rastgeleEtki = Math.random() * 20;
        const mevsimselEtki = Math.sin(Date.now() / 7776000000) * 10; // 3 aylƒ±k cycle
        
        return Math.max(0, Math.min(100, temelRisk + rastgeleEtki + mevsimselEtki));
    }
    
    ekonomikSava≈üRiski() {
        // Ticaret sava≈ülarƒ± riski
        return 25 + (Math.random() * 30);
    }
    
    enerjiG√ºvenliƒüiRiski() {
        // Enerji g√ºvenliƒüi riski
        return 20 + (Math.random() * 40);
    }
    
    parabirimSava≈üƒ±Riski() {
        // Para birimi sava≈ülarƒ± riski
        return 15 + (Math.random() * 25);
    }
    
    // ==========================================
    // EKONOMƒ∞K TAKVƒ∞M
    // ==========================================
    async ekonomikTakvimCek() {
        // Ger√ßek uygulamada ekonomik takvim API'si kullanƒ±lacak
        // Demo ama√ßlƒ± sim√ºle edilmi≈ü etkinlikler
        
        const bug√ºn = new Date();
        const yarƒ±n = new Date(bug√ºn.getTime() + 24 * 60 * 60 * 1000);
        
        return {
            bugunEtkinlikler: [
                {
                    saat: '16:30',
                    √ºlke: 'ABD',
                    etkinlik: 'ƒ∞≈üsizlik Maa≈üƒ± Ba≈üvurularƒ±',
                    √∂nem: 'orta',
                    beklenen: '220K',
                    √∂nceki: '215K'
                }
            ],
            gelecekEtkinlikler: [
                {
                    tarih: yarƒ±n,
                    saat: '20:30', 
                    √ºlke: 'ABD',
                    etkinlik: 'NFP (Tarƒ±m Dƒ±≈üƒ± ƒ∞stihdam)',
                    √∂nem: 'y√ºksek',
                    beklenen: '185K',
                    √∂nceki: '199K'
                }
            ],
            sonSonuclar: [
                {
                    etkinlik: 'TCMB Faiz Kararƒ±',
                    sonu√ß: '45.00%',
                    beklenen: '45.00%',
                    etki: 'n√∂tral'
                }
            ]
        };
    }
    
    // ==========================================
    // MAKRO SKORU HESAPLAMA
    // ==========================================
    makroSkoruHesapla() {
        let skor = 50; // N√∂tral ba≈ülangƒ±√ß
        
        // Faiz oranlarƒ± etkisi
        if (this.ekonomikGostergeler.faizOranlari) {
            const faizTrendi = this.faizTrendiAnalizi();
            skor += faizTrendi * 5;
        }
        
        // K√ºresel piyasa etkisi
        if (this.kureselPiyasalar.spx500) {
            const piyasaTrendi = this.kureselPiyasalar.spx500.deƒüi≈üim || 0;
            skor += piyasaTrendi;
        }
        
        // VIX (korku endeksi) etkisi
        if (this.kureselPiyasalar.vix) {
            const vixSeviyesi = this.kureselPiyasalar.vix.fiyat || 20;
            if (vixSeviyesi > 30) skor -= 10; // Y√ºksek korku
            else if (vixSeviyesi < 15) skor += 5; // D√º≈ü√ºk korku
        }
        
        // Haber duygu analizi etkisi
        skor += this.haberAnalizi.toplamDuyguSkoru * 2;
        
        // Jeopolitik risk etkisi
        const jeopolitikEtki = (this.ekonomikGostergeler.jeopolitikRisk || 35) / 100;
        skor -= jeopolitikEtki * 15;
        
        // Skor sƒ±nƒ±rlarƒ± (0-100)
        skor = Math.max(0, Math.min(100, Math.round(skor)));
        
        // Seviye belirleme
        let seviye = 'N√ñTRAL';
        if (skor > 70) seviye = '√áOK POZƒ∞Tƒ∞F';
        else if (skor > 60) seviye = 'POZƒ∞Tƒ∞F';
        else if (skor < 30) seviye = '√áOK NEGATƒ∞F';
        else if (skor < 40) seviye = 'NEGATƒ∞F';
        
        return { skor, seviye };
    }
    
    faizTrendiAnalizi() {
        // Basit faiz trendi analizi (-1: d√º≈ü√º≈ü, 0: sabit, +1: y√ºkseli≈ü)
        if (!this.ekonomikGostergeler.faizOranlari) return 0;
        
        const fed = this.ekonomikGostergeler.faizOranlari.fed;
        const tcmb = this.ekonomikGostergeler.faizOranlari.tcmb;
        
        // Kar≈üƒ±la≈ütƒ±rmalƒ± faiz analizi
        if (tcmb > fed * 8) return -1; // Y√ºksek faiz spreadi, TL i√ßin negatif
        if (tcmb < fed * 6) return 1;  // D√º≈ü√ºk faiz spreadi, TL i√ßin pozitif
        return 0;
    }
    
    // ==========================================
    // FALLBACK VERƒ∞LERƒ∞
    // ==========================================
    fallbackMakroVerileri() {
        return {
            ekonomikGostergeler: {
                faizOranlari: { fed: 5.25, tcmb: 45.0, ecb: 4.50 },
                jeopolitikRisk: 35
            },
            kureselPiyasalar: this.fallbackKureselPiyasaVerileri(),
            haberAnalizi: this.fallbackHaberAnalizi(),
            makroSkoru: { skor: 50, seviye: 'N√ñTRAL' }
        };
    }
    
    fallbackKureselPiyasaVerileri() {
        return {
            spx500: { fiyat: 4500, deƒüi≈üim: 0.5 },
            nasdaq: { fiyat: 14000, deƒüi≈üim: 0.8 },
            dxy: { fiyat: 104.5, deƒüi≈üim: -0.2 },
            vix: { fiyat: 18.5, deƒüi≈üim: -2.1 },
            gold: { fiyat: 2050, deƒüi≈üim: 0.3 },
            oil: { fiyat: 75.2, deƒüi≈üim: 1.2 },
            bonds10y: { fiyat: 4.25, deƒüi≈üim: 0.1 }
        };
    }
    
    fallbackHaberAnalizi() {
        return {
            pozitifHaberler: 2,
            negatifHaberler: 1,
            n√∂tralHaberler: 3,
            toplamDuyguSkoru: 1
        };
    }
    
    // Demo veriler i√ßin yardƒ±mcƒ± fonksiyonlar
    demoSpx500() { return { fiyat: 4500 + (Math.random() - 0.5) * 100, deƒüi≈üim: (Math.random() - 0.5) * 4 }; }
    demoNasdaq() { return { fiyat: 14000 + (Math.random() - 0.5) * 500, deƒüi≈üim: (Math.random() - 0.5) * 6 }; }
    demoDxy() { return { fiyat: 104.5 + (Math.random() - 0.5) * 2, deƒüi≈üim: (Math.random() - 0.5) * 1 }; }
    demoVix() { return { fiyat: 18.5 + (Math.random() - 0.5) * 8, deƒüi≈üim: (Math.random() - 0.5) * 10 }; }
    demoGoldFutures() { return { fiyat: 2050 + (Math.random() - 0.5) * 50, deƒüi≈üim: (Math.random() - 0.5) * 3 }; }
    demoOilFutures() { return { fiyat: 75.2 + (Math.random() - 0.5) * 10, deƒüi≈üim: (Math.random() - 0.5) * 5 }; }
    demoBonds() { return { fiyat: 4.25 + (Math.random() - 0.5) * 0.5, deƒüi≈üim: (Math.random() - 0.5) * 0.2 }; }
}